user  nobody;

worker_processes  auto;

pcre_jit on;

error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    # Log in JSON Format
    log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
         '"body_bytes_sent": $body_bytes_sent, '
         '"request_time": $request_time, '
         '"response_status": $status, '
         '"request": "$request", '
         '"request_method": "$request_method", '
         '"host": "$host",'
         '"upstream_addr": "$upstream_addr",'
         '"http_x_forwarded_for": "$http_x_forwarded_for",'
         '"http_referrer": "$http_referer", '
         '"http_user_agent": "$http_user_agent", '
         '"http_version": "$server_protocol", '
         '"nginx_access": true }';

    access_log /dev/stdout nginxlog_json;

    proxy_temp_path       /var/run/openresty/nginx-proxy;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  20;

    #gzip  on;

    # Don't reveal OpenResty version to clients.
    server_tokens off;

    lua_shared_dict jwt_cache 10m;
    lua_package_path "/usr/local/openresty/lualib/resty/?.lua;;";
    lua_need_request_body on;

    upstream auth_service {
        server 37.9.53.188;
    }

    upstream shop_service {
        server 37.9.53.150:8000;
    }

    upstream guild_service {
        server 37.9.53.187:8000;
    }

    upstream inventory_service {
        server 37.9.53.107;
    }

    upstream matchmaking_service {
        server 37.9.53.32;
    }

    upstream scoreboard_service {
        server 37.9.53.248:8000;
    }

    init_by_lua_block {
        local utils = require "utils"
        local public_key = utils.read_public_key("/etc/ssl/certs/jwt_public_key.pem")
        ngx.shared.jwt_cache:set("public_key", public_key)
        ngx.log(ngx.INFO, "JWT public key loaded and cached")
    }

    server {
        listen 80;

        server_name battleship-lesta-start.ru www.battleship-lesta-start.ru;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;

        server_name battleship-lesta-start.ru www.battleship-lesta-start.ru;

        ssl_certificate /etc/ssl/certs/API_Gateway_cert.crt;
        ssl_certificate_key /etc/ssl/private/API_Gateway_cert_key.key;

        access_by_lua_block {
            local jwt = require "resty.jwt"
            local cjson = require "cjson"
            local http = require "resty.http"

            local jwt_public_key = ngx.shared.jwt_cache:get("public_key")
            if not jwt_public_key then
                ngx.log(ngx.ERR, "Public key not found in shared dict")
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.say(cjson.encode({ error = "JWT public key error." }))
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local uri = ngx.var.uri
            if uri:find("^/auth") then
                return
            end

            local headers = ngx.req.get_headers()
            local access_token = headers["Authorization"]
            local refresh_token = headers["Refresh-Token"]
            ngx.log(ngx.ERR, "Access token: ", access_token)
            ngx.log(ngx.ERR, "Refresh token: ", refresh_token)

            if not access_token or not access_token:find("Bearer ") then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.say(cjson.encode({ error = "Access token is missing or invalid." }))
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            access_token = access_token:gsub("Bearer ", "")

            
            local ok, jwt_obj = pcall(jwt.verify, jwt, jwt_public_key, access_token)
                if not ok then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say(cjson.encode({ error = "Invalid JWT format." }))
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                ngx.log(ngx.ERR, "JWT object: ", cjson.encode(jwt_obj))
            
            if jwt_obj.verified then
                return
            else
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.say(cjson.encode({ error = "Invalid JWT format." }))
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- Проверим причину отказа
            if jwt_obj.reason == "token expired" and refresh_token then
                -- Обращаемся к /auth/refresh
                local httpc = http.new()
                local res, err = httpc:request_uri("http://auth_service/api/v1/auth/refresh_token/", {
                    method = "POST",
                    headers = {
                        ["Content-Type"] = "application/json",
                        ["Authorization"] = refresh_token
                    }
                })

                if res.status ~= 200 then
                    ngx.log(ngx.ERR, "Refresh request failed: ", err)
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say(cjson.encode({ error = "Refresh request failed." }))
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                if res.status == 200 then
                    local data = cjson.decode(res.body)
                    local new_token = data["access_token"]

                    -- Повторить запрос с новым токеном
                    ngx.req.set_header("Authorization", new_token)
                    local ok, new_jwt = pcall(jwt.verify, jwt, jwt_public_key, new_token)
                    if not ok then
                        ngx.status = ngx.HTTP_UNAUTHORIZED
                        ngx.say(cjson.encode({ error = "Invalid format of new JWT." }))
                        ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    end
                    ngx.log(ngx.ERR, "New JWT object: ", cjson.encode(new_jwt))
                end
            end

            ngx.status = ngx.HTTP_UNAUTHORIZED
            ngx.say(cjson.encode({ error = "Authentication failed." }))
            ngx.exit(ngx.HTTP_UNAUTHORIZED)
        }

        location /auth/ {
            proxy_pass https://37.9.53.188.nip.io/api/v1/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /auth/confirm-email/ {
            proxy_pass https://37.9.53.188.nip.io/api/v1/auth/confirm-email/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass_request_headers on;
            proxy_pass_request_body on;

            proxy_intercept_errors on;

            error_page 400 404 = @handle_confirm_email_error;
        }
        location /users/ {
            proxy_pass https://37.9.53.188.nip.io/api/v1/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @handle_confirm_email_error {
            return 302 http://$http_referer;
        }

        location /shop/ {
            proxy_pass http://shop_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /guild/ {
            proxy_pass http://guild_service/api/v1/guild/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /inventory/ {
            proxy_pass http://inventory_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /matchmaking/ {
            proxy_pass http://matchmaking_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /scoreboard/ {
            proxy_pass http://scoreboard_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}